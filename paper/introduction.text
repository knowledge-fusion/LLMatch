Schema matching is a basic problem in many database applications, such as data integration, data warehousing, etc.
It is the process of identifying semantic correspondences between the attributes of two relational schemas.
These correspondences can be used to generate queries to transform data from source schema to target schema, a process known as schema mapping \cite{weikum2021machine}.
In this work, we only focus on schema matching, specifically on complex databases with multiple tables and attributes.

Schema matching for complex databases are are gaining attention because many industries are moving towards a standard format for data storage and exchange.
For example, in healthcare sector,  Observational Medical Outcomes Partnership (OMOP) \cite{omop} is a common data model that is used to store patient data.
OMOP enables researchers across different organizations to share and analyze patient data in a common format \cite{overhage2012validation}.
Since the inception, OMOP has been adopted by more than 19 countries and has more than 200 million patient records \cite{ohdsi2019book}.

To migrate an existing healthcare database to OMOP is not an easy task. The latest version of OMOP \cite{ohdsi_cdm54} contains more than 30 tables and 400 columns.
Traditional schema matching tools struggle to handle such complexity. Most of the solutions work well to generate mappings from a single source table to a single target table struggle to generate meaningful result for multi-table schema mapping tasks \cite{ETLLambdaBuilder}.
As a result, many existing mappings are manually created and maintained by domain experts \cite{ETLLambdaBuilder}.
However, manual mappings are expensive and error-prone. A 2019 empirical study \cite{ackerman2019cognitive) demonstrates
 that human matching is subject to predictable biases when aligning schemata, which hinder the ability to produce consistent matching outcomes.
Another 2021 study \cite{shraga2021learning} shows human
experts focus more on correctness of answer and are less bothered with the amount of response generated, result in a better precision score than recall.
These issues may propagate to downstream applications, such as data integration, data warehousing, etc.

In recent years, large language models (LLMs) have has shown potential to tackle hard database problems like entity resolution, datalake discovery,
query synthesis \cite{wornow2024automating,10.14778/3611479.3611527} and \cite{rematch, huang2150transform} have already generated new SORA on
multi-table schema mapping tasks.

In this work, we further probe the frontier of LLM based schema matching tasks. It has been shown

